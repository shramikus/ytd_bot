# Generated by Django 2.2.10 on 2020-02-19 10:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AppConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(default=None, max_length=255, null=True)),
                ('api_id', models.PositiveIntegerField(default=None, help_text='getting from https://my.telegram.org/auth', null=True)),
                ('api_hash', models.CharField(default=None, help_text='getting from https://my.telegram.org/auth', max_length=255, null=True)),
                ('is_active', models.BooleanField(blank=True, default=False, help_text='non active config is not working', null=True)),
                ('is_bot', models.BooleanField(blank=True, default=None, help_text='select if you want to use bot account for this config', null=True)),
                ('bot_token', models.CharField(blank=True, default=None, help_text='required if you use bot account.use @botfather for create a bot or get token for available bot.', max_length=255, null=True)),
                ('posting_channel', models.CharField(blank=True, default=None, help_text='channel where the recordings will be published', max_length=255, null=True)),
                ('temp_chat', models.CharField(blank=True, default=None, help_text='chat where the records will be stored', max_length=255, null=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'config',
                'verbose_name_plural': 'configs',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(unique=True, verbose_name='Внешний ID пользователя')),
                ('name', models.TextField(verbose_name='Имя пользователя')),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('yt_id', models.CharField(max_length=11, primary_key=True, serialize=False, unique=True, verbose_name='Id видео')),
                ('yt_url', models.URLField(verbose_name='Ссылка на видео')),
                ('title', models.TextField(verbose_name='Название видео')),
                ('uploader', models.CharField(max_length=150, verbose_name='Канал отправителя')),
                ('upload_date', models.DateField(verbose_name='Дата публикации')),
                ('view_count', models.PositiveIntegerField(verbose_name='Просмотров')),
                ('rating', models.FloatField(verbose_name='Рейтинг')),
                ('tg_id', models.CharField(max_length=50, verbose_name='Id в телеграме')),
                ('status', models.PositiveIntegerField(default=0, verbose_name='Статус')),
                ('tags', models.TextField(default='', verbose_name='Теги')),
                ('categories', models.TextField(default='', verbose_name='Категории')),
                ('likes', models.PositiveIntegerField(default=0, verbose_name='Лайки')),
            ],
            options={
                'verbose_name': 'Видео',
                'verbose_name_plural': 'Видео',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время получения')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ugc.Profile', verbose_name='Профиль')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
            },
        ),
    ]
